# Generated by Django 3.0.14 on 2023-06-18 09:39

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название дисциплины')),
                ('code', models.CharField(max_length=255, verbose_name='Код')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, verbose_name='Эл. Почта')),
                ('prof', models.CharField(max_length=255, verbose_name='Должность')),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Преподаватель',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255, verbose_name='ФИ')),
                ('prof', models.CharField(max_length=255, verbose_name='Должность')),
            ],
        ),
        migrations.CreateModel(
            name='EduLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, verbose_name='Уровень обучения')),
            ],
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, verbose_name='формат')),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Язык')),
            ],
        ),
        migrations.CreateModel(
            name='Literature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(verbose_name='Название')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='literature_set', to='syllabuses.Course', verbose_name='Дисциплина')),
            ],
        ),
        migrations.CreateModel(
            name='LiteratureInSyllabus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mandatory', models.BooleanField(default=0, verbose_name='Обязательная')),
                ('literature', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Literature', verbose_name='Литература')),
            ],
        ),
        migrations.CreateModel(
            name='Proficiency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(max_length=255, verbose_name='Знание языка')),
            ],
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название школы')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, verbose_name='Статус')),
            ],
        ),
        migrations.CreateModel(
            name='Syllabus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('syllabus_name', models.CharField(max_length=255, verbose_name='Название силлабуса')),
                ('total_hours', models.IntegerField(null=True, verbose_name='Всего часов')),
                ('classroom_hours', models.IntegerField(null=True, verbose_name='Классных часов')),
                ('semester', models.IntegerField(null=True, verbose_name='Семестр')),
                ('ects', models.IntegerField(null=True, verbose_name='ects кредиты')),
                ('iw_hours', models.IntegerField(null=True, verbose_name='СРОП часов')),
                ('prerequisites', models.TextField(verbose_name='Пререквизиты')),
                ('edu_programms', models.TextField(verbose_name='Образовательные программы')),
                ('time_place', models.TextField(verbose_name='Время и место проведения')),
                ('course_objective', models.TextField(verbose_name='Цель курса')),
                ('document', models.FileField(blank=True, null=True, upload_to='', verbose_name='Файл')),
                ('course_philosophy', models.TextField(verbose_name='Философия курса')),
                ('course_etics', models.TextField(verbose_name='Политика курса')),
                ('asu', models.BooleanField(default=0, verbose_name='На основе ASU')),
                ('agreed_with', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Director', verbose_name='Согласовывает: ')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Course', verbose_name='Дисциплина')),
                ('format_of_training', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Format', verbose_name='Формат обучения')),
                ('instructor', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.CustomUser', verbose_name='Инструктор/Преподаватель')),
                ('language_of_education', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Language', verbose_name='Язык обучения')),
                ('proficiency_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Proficiency', verbose_name='Уровень владения языком')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Status')),
                ('training_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.EduLevel', verbose_name='Уровень обучения')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week', models.IntegerField(null=True, verbose_name='Неделя')),
                ('theme', models.TextField(verbose_name='Тема')),
                ('tasks', models.TextField(verbose_name='Задания')),
                ('course_lo', models.TextField(verbose_name='Результаты обучения')),
                ('questions', models.TextField(verbose_name='Вопросы по модулю')),
                ('grading', models.TextField(verbose_name='Оценивание')),
                ('max_percent', models.IntegerField(null=True, verbose_name='Максимальный процент')),
                ('max_weight', models.IntegerField(null=True, verbose_name='Максимальный вес')),
                ('total_in_points', models.IntegerField(null=True, verbose_name='В баллах')),
                ('format', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Format')),
                ('literature', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.LiteratureInSyllabus')),
                ('syllabus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Syllabus')),
            ],
        ),
        migrations.AddField(
            model_name='literatureinsyllabus',
            name='syllabus',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Syllabus', verbose_name='Силлабус'),
        ),
        migrations.AddField(
            model_name='literature',
            name='syllabus',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='literature_set', to='syllabuses.Syllabus', verbose_name='Силлабус'),
        ),
        migrations.AddField(
            model_name='director',
            name='school',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.School'),
        ),
        migrations.CreateModel(
            name='CourseLO',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.BooleanField(default=0, verbose_name='Тип РО')),
                ('info', models.TextField(verbose_name='Результаты обучения')),
                ('syllabus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='syllabuses.Syllabus', verbose_name='Силлабус')),
            ],
        ),
    ]
